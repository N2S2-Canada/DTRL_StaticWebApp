@page "/admin/services"
@using System.Net.Http.Json
@using System.Net
@using Microsoft.AspNetCore.Components.Forms
@using SharedModels
@inject HttpClient Http
@inject NavigationManager Nav

<h1 class="mb-3">Services Admin</h1>

@if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">@error</div>
}

<div class="row">
    <!-- Left: List -->
    <div class="col-lg-4">
        <div class="card mb-3">
            <div class="card-header d-flex justify-content-between align-items-center">
                <strong>Existing Services</strong>
                <button class="btn btn-sm btn-outline-primary" @onclick="NewService">+ New</button>
            </div>
            <div class="list-group list-group-flush">
                @if (list is null)
                {
                    <div class="list-group-item">Loading…</div>
                }
                else if (list.Count == 0)
                {
                    <div class="list-group-item text-muted">No services yet.</div>
                }
                else
                {
                    @foreach (var s in list.OrderBy(s => s.Sort).ThenBy(s => s.Title, StringComparer.OrdinalIgnoreCase))
                    {
                        <button class="list-group-item list-group-item-action d-flex justify-content-between align-items-center"
                                @onclick="() => LoadOneAsync(s.Id)">
                            <span>
                                <span class="badge bg-secondary me-2">@s.Sort</span>
                                <strong>@s.Title</strong>
                                <div class="small text-muted">@s.Id</div>
                            </span>
                            <span class="text-nowrap small">@Trunc(s.Description, 28)</span>
                        </button>
                    }
                }
            </div>
        </div>

        <div class="card">
            <div class="card-header"><strong>Dev Only</strong></div>
            <div class="card-body">
                <label class="form-label">Local dev API key (x-api-key)</label>
                <input class="form-control" @bind="apiKey" placeholder="Leave empty in production" />
                <div class="form-text">Only needed when running locally without SWA role enforcement.</div>
            </div>
        </div>
    </div>

    <!-- Right: Editor -->
    <div class="col-lg-8">
        <EditForm Model="svc">
            <div class="card mb-3">
                <div class="card-header"><strong>Service Card</strong></div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-4">
                            <label class="form-label">Id (slug)</label>
                            <input class="form-control" @bind="svc.Id" placeholder="e.g., events" />
                            <div class="form-text">Used in the URL: /services/{id}</div>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Sort</label>
                            <input type="number" class="form-control" @bind="svc.Sort" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Title</label>
                            <input class="form-control" @bind="svc.Title" />
                        </div>
                        <div class="col-12">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" rows="2" @bind="svc.Description"></textarea>
                        </div>

                        <div class="col-12">
                            <label class="form-label">Image URL</label>
                            <div class="input-group">
                                <input class="form-control" @bind="svc.ImageUrl" placeholder="/images/... or https://..." />
                                <label class="btn btn-outline-primary">
                                    Choose file…
                                    <InputFile OnChange="OnPickServiceImage" accept="image/*" style="display:none" />
                                </label>
                            </div>
                            @if (!string.IsNullOrWhiteSpace(svc.ImageUrl))
                            {
                                <img src="@svc.ImageUrl" alt="preview" class="img-thumbnail mt-2" style="max-height:160px" />
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="card mb-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <strong>Sections</strong>
                    <button type="button" class="btn btn-sm btn-outline-success" @onclick="AddSection">+ Add section</button>
                </div>
                <div class="card-body">
                    @if (svc.Sections?.Count > 0)
                    {
                        @for (int i = 0; i < svc.Sections.Count; i++)
                        {
                            var sec = svc.Sections[i];
                            <div class="border rounded p-3 mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <strong>Section @((i + 1).ToString())</strong>
                                    <div class="btn-group btn-group-sm">
                                        <button type="button" class="btn btn-outline-secondary" disabled="@(i == 0)" @onclick="@(() => Move(i, -1))">↑</button>
                                        <button type="button" class="btn btn-outline-secondary" disabled="@(i == svc.Sections.Count - 1)" @onclick="@(() => Move(i, +1))">↓</button>
                                        <button type="button" class="btn btn-outline-danger" @onclick="@(() => RemoveSection(i))">Remove</button>
                                    </div>
                                </div>

                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label class="form-label">Title</label>
                                        <input class="form-control" @bind="sec.Title" />
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">Image URL</label>
                                        <div class="input-group">
                                            <input class="form-control" @bind="sec.ImageUrl" placeholder="/images/... or https://..." />
                                            <label class="btn btn-outline-primary">
                                                Choose file…
                                                <InputFile OnChange="@(e => OnPickSectionImage(e, sec))" accept="image/*" style="display:none" />
                                            </label>
                                        </div>
                                    </div>
                                    <div class="col-12">
                                        <label class="form-label">Body (HTML)</label>
                                        <textarea class="form-control" rows="5" @bind="sec.BodyHtml"></textarea>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted">No sections yet.</p>
                    }
                </div>
            </div>

            <div class="d-flex gap-2">
                <button type="button" class="btn btn-primary" @onclick="SaveAsync">Save Service</button>
                <button type="button" class="btn btn-outline-secondary" @onclick="NewService">Clear</button>
                <a class="btn btn-outline-dark" href="/#services">Back to site</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    // List + editor model
    private List<Service>? list;
    private Service svc = new() { Sections = new() };
    private string? apiKey;
    private string? error;

    // --- lifecycle ---
    protected override async Task OnInitializedAsync()
    {
        await LoadListAsync();
    }

    private async Task LoadListAsync()
    {
        error = null;
        try
        {
            list = await Http.GetFromJsonAsync<List<Service>>("api/services");
        }
        catch (Exception ex)
        {
            error = $"Failed to load list: {ex.Message}";
            list = new();
        }
    }

    private async Task LoadOneAsync(string id)
    {
        error = null;
        try
        {
            svc = await Http.GetFromJsonAsync<Service>($"api/services/{Uri.EscapeDataString(id)}")
                  ?? new Service { Id = id, Sections = new() };
        }
        catch (Exception ex)
        {
            error = $"Failed to load service: {ex.Message}";
        }
    }

    private void NewService()
    {
        svc = new Service { Sections = new() };
    }

    // --- modify sections ---
    private void AddSection() => svc.Sections.Add(new ServiceSection());

    private void RemoveSection(int index)
    {
        if (index >= 0 && index < svc.Sections.Count) svc.Sections.RemoveAt(index);
    }

    private void Move(int index, int delta)
    {
        var newIdx = index + delta;
        if (newIdx < 0 || newIdx >= svc.Sections.Count) return;
        (svc.Sections[index], svc.Sections[newIdx]) = (svc.Sections[newIdx], svc.Sections[index]);
    }

    // --- uploads ---
    private async Task OnPickServiceImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file is null) return;
        await UploadViaSasAsync(file, url => svc.ImageUrl = url);
    }

    private async Task OnPickSectionImage(InputFileChangeEventArgs e, ServiceSection sec)
    {
        var file = e.File;
        if (file is null) return;
        await UploadViaSasAsync(file, url => sec.ImageUrl = url);
    }

    private async Task UploadViaSasAsync(IBrowserFile file, Action<string> setUrl)
    {
        error = null;
        try
        {
            // Suggest a filename: {serviceId}-{guid}{ext}
            var ext = Path.GetExtension(file.Name);
            if (string.IsNullOrWhiteSpace(ext)) ext = ".bin";
            var fname = $"{(string.IsNullOrWhiteSpace(svc.Id) ? "image" : svc.Id)}-{Guid.NewGuid():N}{ext}";

            var sasReq = new { container = "media", fileName = fname, contentType = file.ContentType, overwrite = true };
            var sasMsg = new HttpRequestMessage(HttpMethod.Post, "api/blob/sas")
            {
                Content = JsonContent.Create(sasReq)
            };
            if (!string.IsNullOrWhiteSpace(apiKey))
                sasMsg.Headers.Add("x-api-key", apiKey);

            var sasResp = await Http.SendAsync(sasMsg);
            if (!sasResp.IsSuccessStatusCode)
            {
                error = $"SAS request failed: {(int)sasResp.StatusCode} {sasResp.ReasonPhrase}";
                return;
            }

            var sas = await sasResp.Content.ReadFromJsonAsync<SasResponse>();
            if (sas is null) { error = "Invalid SAS response."; return; }

            using var content = new StreamContent(file.OpenReadStream(long.MaxValue));
            content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

            var put = new HttpRequestMessage(HttpMethod.Put, sas.UploadUrl) { Content = content };
            put.Headers.Add("x-ms-blob-type", "BlockBlob");

            var putResp = await Http.SendAsync(put);
            if (!(putResp.IsSuccessStatusCode || putResp.StatusCode == HttpStatusCode.Created))
            {
                error = $"Upload failed: {(int)putResp.StatusCode} {putResp.ReasonPhrase}";
                return;
            }

            setUrl(sas.BlobUrl);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    private sealed class SasResponse
    {
        public string UploadUrl { get; set; } = default!;
        public string BlobUrl { get; set; } = default!;
        public DateTimeOffset ExpiresOn { get; set; }
    }

    // --- save ---
    private async Task SaveAsync()
    {
        error = null;

        if (string.IsNullOrWhiteSpace(svc.Id))
        {
            error = "Service Id (slug) is required.";
            return;
        }
        if (svc.Sections is null) svc.Sections = new();

        try
        {
            var msg = new HttpRequestMessage(HttpMethod.Post, "api/services")
            {
                Content = JsonContent.Create(svc)
            };
            if (!string.IsNullOrWhiteSpace(apiKey))
                msg.Headers.Add("x-api-key", apiKey);

            var resp = await Http.SendAsync(msg);
            if (!resp.IsSuccessStatusCode)
            {
                error = $"Save failed: {(int)resp.StatusCode} {resp.ReasonPhrase}";
                return;
            }

            await LoadListAsync(); // refresh list after save
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    // --- local helpers ---
    private static string Trunc(string? s, int max)
        => string.IsNullOrEmpty(s) ? "" : (s!.Length <= max ? s : s.Substring(0, max) + "…");
}

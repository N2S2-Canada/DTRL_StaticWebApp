@page "/videos"
@using Microsoft.AspNetCore.WebUtilities
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Nav

<h1>@(string.IsNullOrWhiteSpace(pageTitle) ? "DiverseTech Robotics Media" : pageTitle)</h1>

<!-- Particle Canvas -->
<canvas id="particleCanvas"></canvas>

@if (videos == null)
{
    <p>Loading...</p>
}
else if (videos.Count == 0)
{
    <p>No media found.</p>
}
else
{
    <!-- Filter toolbar -->
    <div class="container px-0 mb-3" style="position: relative; z-index:1;">
        <div class="d-flex flex-wrap align-items-center gap-2 filterbar @(selectedCategories.Count > 0 ? "has-active-filters" : null) mode-@filterMode.ToString().ToLowerInvariant()">
            <span class="text-body-secondary">Filter by category:</span>

            @foreach (var cat in allCategories)
            {
                var isOn = selectedCategories.Contains(cat);
                <span class="badge rounded-pill filter-chip border border-dark @GetCategoryClasses(cat) @(isOn ? "active" : "")"
                      role="button" tabindex="0"
                      aria-pressed="@(isOn ? "true" : "false")"
                      title="@(isOn ? $"Remove filter: {cat}" : $"Filter: {cat}")"
                      @onclick='() => ToggleCategory(cat)'
                      @onkeydown='(KeyboardEventArgs e) => { if (e.Key == "Enter" || e.Key == " ") ToggleCategory(cat); }'>
                    <span class="chip-check" aria-hidden="true">✓</span>
                    <span class="chip-x" aria-hidden="true">✕</span>
                    <span class="chip-label">@cat</span>
                </span>
            }

            <div class="ms-auto d-flex align-items-center gap-2">
                <div class="btn-group btn-group-sm" role="group" aria-label="Filter mode">
                    <button type="button" class="btn btn-outline-primary @(filterMode == FilterMode.Or ? "active" : null)"
                            title="Match any selected category"
                            @onclick="() => SetMode(FilterMode.Or)">
                        OR
                    </button>
                    <button type="button" class="btn btn-outline-primary @(filterMode == FilterMode.And ? "active" : null)"
                            title="Match all selected categories"
                            @onclick="() => SetMode(FilterMode.And)">
                        AND
                    </button>
                    <button type="button" class="btn btn-outline-danger @(filterMode == FilterMode.Not ? "active" : null)"
                            title="Exclude selected categories"
                            @onclick="() => SetMode(FilterMode.Not)">
                        NOT
                    </button>
                </div>

                @if (selectedCategories.Count > 0)
                {
                    <span class="badge bg-primary-subtle text-dark border">Selected @selectedCategories.Count</span>
                }
                <button class="btn btn-sm btn-outline-secondary"
                        @onclick="ClearFilters"
                        disabled="@(selectedCategories.Count == 0)">
                    Clear
                </button>
            </div>
        </div>
    </div>

    <!-- Grid -->
    <div style="position: relative; z-index:1;">
        @* Build the same order we’ll use for the modal carousel *@
        @{
            var orderedGroups = filteredVideos
            .Where(v => v.Categories != null && v.Categories.Any())
            .GroupBy(v => v.Categories.First())
            .OrderBy(g => g.Key)
            .ToList();

            var runningIndex = 0;
        }

        @foreach (var group in orderedGroups)
        {
            if (!group.Any()) { continue; }

            <h4 class="mt-4">@group.Key</h4>
            <div class="row g-3">
                @foreach (var item in group)
                {
                    var idx = runningIndex++;

                    <div class="col-sm-6 col-md-4 col-lg-3">
                        <div class="card h-100 shadow-sm card-hover-lift">

                            <div class="video-thumbnail-wrapper ratio ratio-16x9 rounded-top"
                                 role="button" tabindex="0"
                                 @onclick='() => OpenModalAt(idx)'
                                 @onkeydown='(KeyboardEventArgs e) => { if (e.Key == "Enter" || e.Key == " ") OpenModalAt(idx); }'>

                                @* Download overlay (only when code supplied) *@
                                @if (AllowDownload)
                                {
                                    <a class="thumb-action btn btn-sm btn-light border"
                                       href="@item.Url"
                                       download="@($"{item.Name}{(item.IsVideo ? ".mp4" : ".jpg")}")"
                                       rel="noopener"
                                       title="Download"
                                       @onclick:stopPropagation="true"
                                       @onkeydown:stopPropagation="true">
                                        ↓
                                    </a>
                                }

                                <img alt="@item.Name"
                                     class="media-photo"
                                     loading="lazy"
                                     decoding="async"
                                     src="@ThumbSrc(item)"
                                     srcset="@ThumbSrcSet(item)"
                                     sizes="(min-width: 1200px) 25vw,
                                    (min-width: 992px)  33vw,
                                    (min-width: 576px)  50vw,
                                    100vw" />

                                @if (item.IsVideo)
                                {
                                    <span class="play-icon">&#9658;</span>
                                }
                            </div>

                            @* 🔽 This section restores the filename and category badges *@
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title mb-2">@item.Name</h5>
                                <div class="mb-2">
                                    @if (item.Categories != null)
                                    {
                                        @foreach (var category in item.Categories)
                                        {
                                            <span class="badge @GetCategoryClasses(category) border border-dark rounded-pill me-1 category-badge">
                                                @category
                                            </span>
                                        }
                                    }
                                </div>
                            </div>

                        </div>
                    </div>
                }
            </div>
        }
    </div>
}

<!-- Bootstrap Modal: acts like a carousel -->
<div class="modal fade" tabindex="-1" id="mediaModal" aria-hidden="true" style="z-index:1050;">
    <div class="modal-dialog modal-dialog-centered modal-xl">
        <div class="modal-content">
            <div class="modal-header border-0">
                <button type="button" class="btn-close" @onclick="CloseModalAsync" aria-label="Close"></button>
            </div>

            <div class="modal-body text-center position-relative" tabindex="0" @onkeydown="HandleModalKeys">
                <!-- Prev / Next controls -->
                <button type="button" class="carousel-nav prev" title="Previous (←)" @onclick="PrevItem" aria-label="Previous">‹</button>
                <button type="button" class="carousel-nav next" title="Next (→)" @onclick="NextItem" aria-label="Next">›</button>

                @* Modal download overlay (only when code supplied) *@
                <div class="media-frame d-inline-block position-relative">
                    @if (AllowDownload)
                    {
                        <a class="thumb-action btn btn-light border modal-dl" ...>↓</a>
                    }
                    <!-- image/video here -->
                </div>

                @if (currentItem != null)
                {
                    <div class="media-frame d-inline-block position-relative">
                        @* Download overlay (anchored to the media, only with code) *@
                        @if (AllowDownload)
                        {
                            <!-- Caption / filename -->
                            <a class="thumb-action btn btn-light border modal-dl"
                               href="@currentItem.Url"
                               download='@($"{currentItem.Name}{(currentItem.IsVideo ? ".mp4" : ".jpg")}")'
                               rel="noopener"
                               title="Download">
                                ↓
                            </a>
                        }

                        @if (currentItem.IsVideo)
                        {
                            <video class="img-fluid"
                                   playsinline
                                   preload="metadata"
                                   controls
                                   @attributes="GetVideoAttributes()">
                                <source src="@currentItem.Url" type="video/mp4" />
                                Your browser does not support the video tag.
                            </video>
                        }
                        else
                        {
                            <img src="@currentItem.Url"
                                 alt="@currentItem.Name"
                                 class="img-fluid"
                                 draggable="false"
                                 @attributes="GetImageAttributes()" />
                        }
                    </div>

                    <!-- Caption / filename -->
                    <div class="mt-2 text-muted small">@currentItem.Name</div>
                    <div class="text-muted-50 small">@((currentIndex + 1)) of @visibleItems.Count</div>
                }
            </div> <!-- /.modal-body -->
        </div> <!-- /.modal-content -->
    </div> <!-- /.modal-dialog -->
</div> <!-- /.modal -->
@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "cust_code")]
    public string? customerCode { get; set; }   // ?cust_code=ABCDE
    [Parameter][SupplyParameterFromQuery(Name = "mode")] public string? modeParam { get; set; }
    [Parameter][SupplyParameterFromQuery(Name = "cats")] public string? catsParam { get; set; }

    private List<SharedModels.Video>? videos;
    private List<SharedModels.Video> filteredVideos = new();
    private string? pageTitle;

    private bool modalIsVideo = false; // kept for compatibility (not strictly needed now)
    private IJSObjectReference? module;
    private IJSObjectReference? particlesModule;

    // --- Carousel state ---
    private List<SharedModels.Video> visibleItems = new();
    private int currentIndex = -1;
    private SharedModels.Video? currentItem;
    private bool AllowDownload => !string.IsNullOrWhiteSpace(customerCode);

    // Category filtering state
    private readonly HashSet<string> selectedCategories = new(StringComparer.OrdinalIgnoreCase);
    private List<string> allCategories = new();

    private sealed class VideosResponse
    {
        public string? Title { get; set; }
        public List<SharedModels.Video>? Items { get; set; }
    }

    private enum FilterMode { Or, And, Not }
    private FilterMode filterMode = FilterMode.Or;

    protected override async Task OnParametersSetAsync()
    {
        var apiUrl = string.IsNullOrWhiteSpace(customerCode)
            ? "/api/videos"
            : $"/api/videos?cust_code=" + Uri.EscapeDataString(customerCode ?? "");

        try
        {
            var payload = await Http.GetFromJsonAsync<VideosResponse>(apiUrl);
            pageTitle = payload?.Title;
            videos = payload?.Items ?? new List<SharedModels.Video>();

            allCategories = videos
                .SelectMany(v => v.Categories ?? Array.Empty<string>())
                .Select(c => c?.Trim())
                .Where(c => !string.IsNullOrWhiteSpace(c))
                .Cast<string>()
                .Distinct(StringComparer.OrdinalIgnoreCase)
                .OrderBy(c => c, StringComparer.OrdinalIgnoreCase)
                .ToList();

            ReadStateFromUrl();
            ApplyCategoryFilter(); // also rebuilds visibleItems
        }
        catch
        {
            pageTitle = null;
            videos = new List<SharedModels.Video>();
            allCategories = new();
            filteredVideos = new();
            visibleItems = new();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "/scripts/mediaModal.js");
            particlesModule = await JS.InvokeAsync<IJSObjectReference>("import", "/scripts/particles.js");
            await particlesModule.InvokeVoidAsync("startParticles");
        }
    }

    // --- Modal / Carousel ---
    private async Task OpenModalAt(int index)
    {
        if (index < 0 || index >= visibleItems.Count) return;

        currentIndex = index;
        currentItem = visibleItems[currentIndex];
        modalIsVideo = currentItem.IsVideo;

        if (module != null)
            await module.InvokeVoidAsync("showModal");
    }

    private async Task CloseModalAsync()
    {
        if (module != null)
            await module.InvokeVoidAsync("hideModal");

        currentIndex = -1;
        currentItem = null;
        modalIsVideo = false;
    }

    private void NextItem()
    {
        if (visibleItems.Count == 0) return;
        currentIndex = (currentIndex + 1 + visibleItems.Count) % visibleItems.Count;
        currentItem = visibleItems[currentIndex];
        StateHasChanged();
    }

    private void PrevItem()
    {
        if (visibleItems.Count == 0) return;
        currentIndex = (currentIndex - 1 + visibleItems.Count) % visibleItems.Count;
        currentItem = visibleItems[currentIndex];
        StateHasChanged();
    }

    private void HandleModalKeys(KeyboardEventArgs e)
    {
        if (e.Key == "ArrowRight") NextItem();
        else if (e.Key == "ArrowLeft") PrevItem();
        else if (e.Key == "Escape") _ = CloseModalAsync();
    }

    // --- Category badges mapping ---
    private readonly Dictionary<string, string> CategoryClasses = new()
    {
        { "nature", "bg-primary text-white" },
        { "agriculture", "bg-success text-dark" },
        { "industrial", "bg-warning text-dark" },
        { "real estate", "bg-danger text-white" },
        { "wedding", "bg-info text-dark" },
        { "social", "bg-secondary text-white" },
        { "mapping", "bg-success-subtle text-dark" },
        { "inspection", "bg-primary-subtle text-dark" },
        { "videography", "bg-warning-subtle text-dark" },
        { "photography", "bg-info-subtle text-dark" },
        { "multi-spectra", "bg-dark text-white" },
        { "event", "bg-danger-subtle text-dark" },
        { "community", "bg-light text-dark" }
    };

    private string GetCategoryClasses(string category)
    {
        if (string.IsNullOrWhiteSpace(category))
            return "bg-secondary text-white";
        var key = category.Trim().ToLowerInvariant();
        return CategoryClasses.TryGetValue(key, out var css) ? css : "bg-secondary text-white";
    }

    // ---------- Filtering ----------
    private void ToggleCategory(string cat)
    {
        if (selectedCategories.Contains(cat)) selectedCategories.Remove(cat);
        else selectedCategories.Add(cat);
        ApplyCategoryFilter();
        UpdateUrlFromState();
    }

    private void SetMode(FilterMode mode)
    {
        filterMode = mode;
        ApplyCategoryFilter();
        UpdateUrlFromState();
    }

    private void ClearFilters()
    {
        selectedCategories.Clear();
        ApplyCategoryFilter();
        UpdateUrlFromState();
    }

    private void ApplyCategoryFilter()
    {
        if (videos is null) { filteredVideos = new(); visibleItems = new(); return; }

        if (selectedCategories.Count == 0)
        {
            filteredVideos = videos.Where(v => v.Categories != null && v.Categories.Any()).ToList();
        }
        else
        {
            Func<SharedModels.Video, bool> predicate = v => false;
            switch (filterMode)
            {
                case FilterMode.Or:
                    predicate = v => v.Categories != null && v.Categories.Any(c => selectedCategories.Contains(c));
                    break;
                case FilterMode.And:
                    predicate = v => v.Categories != null && selectedCategories.All(sel => v.Categories.Contains(sel, StringComparer.OrdinalIgnoreCase));
                    break;
                case FilterMode.Not:
                    predicate = v => v.Categories != null && !v.Categories.Any(c => selectedCategories.Contains(c));
                    break;
            }
            filteredVideos = videos.Where(predicate).ToList();
        }

        // Flatten to the SAME order as the grid
        visibleItems = filteredVideos
            .Where(v => v.Categories != null && v.Categories.Any())
            .GroupBy(v => v.Categories.First())
            .OrderBy(g => g.Key)
            .SelectMany(g => g)
            .ToList();

        // Keep modal index in bounds if open
        if (currentIndex >= 0 && visibleItems.Count > 0)
        {
            currentIndex = Math.Clamp(currentIndex, 0, visibleItems.Count - 1);
            currentItem = visibleItems[currentIndex];
        }
        else
        {
            currentIndex = -1;
            currentItem = null;
        }
    }

    // ---------- URL state ----------
    private void ReadStateFromUrl()
    {
        var uri = new Uri(Nav.Uri);
        var q = QueryHelpers.ParseQuery(uri.Query);

        if (q.TryGetValue("mode", out var modeVals))
            filterMode = ParseMode(modeVals.ToString()) ?? FilterMode.Or;
        else if (!string.IsNullOrWhiteSpace(modeParam))
            filterMode = ParseMode(modeParam!) ?? FilterMode.Or;

        var incomingCats = new List<string>();
        if (q.TryGetValue("cats", out var catVals))
            incomingCats.AddRange(catVals.ToString().Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries));
        else if (!string.IsNullOrWhiteSpace(catsParam))
            incomingCats.AddRange(catsParam!.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries));

        selectedCategories.Clear();
        foreach (var c in incomingCats)
            if (allCategories.Contains(c, StringComparer.OrdinalIgnoreCase))
                selectedCategories.Add(allCategories.First(ac => string.Equals(ac, c, StringComparison.OrdinalIgnoreCase)));
    }

    private void UpdateUrlFromState()
    {
        var basePath = "/videos";
        var qs = new Dictionary<string, string?>(StringComparer.OrdinalIgnoreCase);
        if (!string.IsNullOrWhiteSpace(customerCode)) qs["cust_code"] = customerCode;
        if (selectedCategories.Count > 0) qs["cats"] = string.Join(",", selectedCategories);
        if (filterMode != FilterMode.Or || selectedCategories.Count > 0) qs["mode"] = filterMode.ToString().ToLowerInvariant();
        var target = QueryHelpers.AddQueryString(basePath, qs!);
        Nav.NavigateTo(target, replace: true);
    }

    private static FilterMode? ParseMode(string s) => s?.Trim().ToLowerInvariant() switch
    {
        "and" => FilterMode.And,
        "not" => FilterMode.Not,
        "or" => FilterMode.Or,
        _ => null
    };

    // ---------- Thumbnail helpers ----------
    private static string ThumbSrc(SharedModels.Video v)
        => v.ThumbnailSmall ?? v.ThumbnailMedium ?? v.ThumbnailLarge ?? v.ThumbnailUrl ?? v.Url ?? "";

    private static string ThumbSrcSet(SharedModels.Video v)
    {
        var parts = new List<string>(3);
        if (!string.IsNullOrWhiteSpace(v.ThumbnailSmall)) parts.Add($"{v.ThumbnailSmall} 320w");
        if (!string.IsNullOrWhiteSpace(v.ThumbnailMedium)) parts.Add($"{v.ThumbnailMedium} 640w");
        if (!string.IsNullOrWhiteSpace(v.ThumbnailLarge)) parts.Add($"{v.ThumbnailLarge} 896w");
        return string.Join(", ", parts);
    }

    // ---------- Modal attribute helpers (download gating) ----------
    private IReadOnlyDictionary<string, object?> GetVideoAttributes()
    {
        if (AllowDownload)
            return new Dictionary<string, object?>();
        return new Dictionary<string, object?>
        {
            ["controlsList"] = "nodownload",
            ["disablePictureInPicture"] = true,
            ["oncontextmenu"] = "return false"
        };
    }

    private IReadOnlyDictionary<string, object?> GetImageAttributes()
    {
        if (AllowDownload)
            return new Dictionary<string, object?>();
        return new Dictionary<string, object?>
        {
            ["oncontextmenu"] = "return false"
        };
    }
}

@page "/videos"
@inject HttpClient Http

<h1>DiverseTech Robotics Media</h1>

@if (videos == null)
{
    <p>Loading...</p>
}
else if (videos.Count == 0)
{
    <p>No media found.</p>
}
else
{
    @foreach (var group in videos
                .Where(v => v.Categories.Any())
                .GroupBy(v => v.Categories.First())
                .OrderBy(g => g.Key))
    {
        <h4>@group.Key</h4>
        <div class="media-grid">
            @foreach (var item in group)
            {
                <div class="media-item">
                    @if (item.IsVideo)
                    {
                        <div class="media-video-container">
                            <img src="@item.ThumbnailUrl" alt="@item.Name"
                                 class="media-photo"
                                 @onclick="() => ShowModal(item.Url!, true)" />
                        </div>
                    }
                    else
                    {
                        <img class="media-photo"
                             src="@item.Url"
                             alt="@item.Name"
                             @onclick="() => ShowModal(item.Url!)" />
                    }

                    <div class="media-info">
                        <div class="media-name">@item.Name</div>
                        <div class="media-categories">
                            @foreach (var category in item.Categories)
                            {
                                var colors = GetCategoryColors(category);
                                <span class="category-badge"
                                      style="background-color:@colors.bg; color:@colors.text;">
                                    @category
                                </span>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}

@if (modalVisible)
{
    <div class="modal-overlay" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <span class="modal-close" @onclick="CloseModal">&times;</span>
            @if (modalIsVideo)
            {
                <video controls autoplay style="max-width:100%; max-height:100%;">
                    <source src="@modalVideoUrl" type="video/mp4" />
                    Your browser does not support the video tag.
                </video>
            }
            else
            {
                <img src="@modalImageUrl" alt="Enlarged photo" />
            }
        </div>
    </div>
}

@code {
    private List<Video>? videos;

    private bool modalVisible = false;
    private bool modalIsVideo = false;
    private string modalImageUrl = "";
    private string modalVideoUrl = "";

    protected override async Task OnInitializedAsync()
    {
        videos = await Http.GetFromJsonAsync<List<Video>>("/api/videos") ?? new List<Video>();
    }

    private void ShowModal(string url, bool isVideo = false)
    {
        modalVisible = true;
        modalIsVideo = isVideo;

        if (isVideo)
        {
            modalVideoUrl = url;
            modalImageUrl = "";
        }
        else
        {
            modalImageUrl = url;
            modalVideoUrl = "";
        }
    }

    private void CloseModal()
    {
        modalVisible = false;
        modalIsVideo = false;
        modalImageUrl = "";
        modalVideoUrl = "";
    }

    private readonly Dictionary<string, (string bg, string text)> CategoryColors = new()
    {
        { "nature", ("#d4e7f6", "#454871") },
        { "agriculture", ("#caf0cc", "#72744c") },
        { "industrial", ("#ffebc0", "#be751f") },
        { "real estate", ("#fabbc3", "#a30e15") },
        { "wedding", ("#c3f8f9", "#03787c") },
        { "social", ("#fed5d1", "#b5410d") },
        { "mapping", ("#caeee9", "#445348") },
        { "inspection", ("#c3caf9", "#7658e8") },
        { "videography", ("#d8d8ee", "#373277") },
        { "photography", ("#80c6ff", "#004e8c") },
        { "multi-spectra", ("#e5d2e3", "#ae5a7b") },
        { "event", ("#e5e5e5", "#333333") },
        { "community", ("#fffefc", "#000000") }
    };

    private (string bg, string text) GetCategoryColors(string category)
    {
        if (string.IsNullOrWhiteSpace(category))
            return ("#6c757d", "white");

        var key = category.Trim().ToLowerInvariant();
        return CategoryColors.TryGetValue(key, out var colors) ? colors : ("#6c757d", "white");
    }
}

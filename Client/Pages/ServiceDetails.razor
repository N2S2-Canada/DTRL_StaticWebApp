@page "/services/{id}"
@using System.Net.Http.Json
@using SharedModels
@inject HttpClient Http
@inject NavigationManager Navigation
@inject MetaTagService MetaTags

@if (service is null)
{
    <div class="container py-5">
        <p class="text-center">Loading service details...</p>
    </div>
}
else if (service == NotFound)
{
    <div class="container py-5">
        <h2 class="text-center mb-3">Service not found</h2>
        <div class="text-center">
            <a href="/#services" class="btn btn-primary">Back to Services</a>
        </div>
    </div>
}
else
{
    <div class="container py-5">
        <button class="btn btn-outline-secondary mb-3" @onclick="GoBackToServices">
            &larr; Back to Services
        </button>

        <h1 class="mb-3 text-center">@service.Title</h1>

        <div class="row justify-content-center mb-4">
            <div class="col-lg-10">
                <img src="@service.ImageUrl"
                     alt="@service.Title"
                     class="img-fluid rounded shadow w-100"
                     loading="lazy" />
            </div>
        </div>

        <div class="row justify-content-center">
            <div class="col-lg-8">
                <p class="lead text-center">@service.Description</p>
            </div>
        </div>

        @if (service.Sections?.Count > 0)
        {
            <hr class="my-5" />

            @for (var i = 0; i < service.Sections.Count; i++)
            {
                var sec = service.Sections[i];
                var reverse = (i % 2 == 1);

                <div class="row align-items-center gy-4 my-4 section-block">
                    @if (!reverse)
                    {
                        <div class="col-md-6">
                            <img src="@sec.ImageUrl"
                                 alt="@sec.Title"
                                 class="img-fluid rounded shadow"
                                 loading="lazy" />
                        </div>
                        <div class="col-md-6">
                            <h3 class="mb-3">@sec.Title</h3>
                            <div class="section-body" @onclick:stopPropagation="true" @onmousedown:stopPropagation="true">
                                @((MarkupString)sec.BodyHtml)
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="col-md-6 order-md-2">
                            <img src="@sec.ImageUrl"
                                 alt="@sec.Title"
                                 class="img-fluid rounded shadow"
                                 loading="lazy" />
                        </div>
                        <div class="col-md-6 order-md-1">
                            <h3 class="mb-3">@sec.Title</h3>
                            <div class="section-body" @onclick:stopPropagation="true" @onmousedown:stopPropagation="true">
                                @((MarkupString)sec.BodyHtml)
                            </div>
                        </div>
                    }
                </div>
            }
        }
    </div>
}

@code {
    [Parameter] public string id { get; set; } = string.Empty;

    private Service? service;
    private static readonly Service NotFound = new();
    private const string DefaultOgImage = "/images/og-default.webp";

    protected override async Task OnInitializedAsync()
    {
        // Build absolute URL so it works from /services/{id}
        var baseUri = new Uri(Navigation.BaseUri);
        var jsonUri = new Uri(baseUri, "data/services.json");

        var all = await Http.GetFromJsonAsync<List<Service>>(jsonUri.ToString());
        service = all?.FirstOrDefault(s => string.Equals(s.Id, id, StringComparison.OrdinalIgnoreCase))
                  ?? NotFound;

        // SEO tags
        var selectedImg = service != NotFound && !string.IsNullOrWhiteSpace(service.ImageUrl)
            ? service.ImageUrl : DefaultOgImage;
        var absoluteImg = Navigation.ToAbsoluteUri(selectedImg).ToString();

        await MetaTags.SetSeoTagsAsync(
            service != NotFound ? $"{service.Title} | DiverseTech Robotics Ltd." : "Service Not Found | DiverseTech Robotics Ltd.",
            service != NotFound ? service.Description : "Explore our drone service offerings.",
            absoluteImg
        );
    }
    private void GoBackToServices()
    {
        // Force a full page load so the hash scroll happens after the DOM is ready
        Navigation.NavigateTo("/#services", forceLoad: true);
    }

}
